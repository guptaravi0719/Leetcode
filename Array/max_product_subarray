152. Maximum Product Subarray
Medium

6370

209

Add to List

Share
Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.



/////////////////////////////////////////////////////////////////////////////
//Brute force(Correct but time limit exceeded) O(N^2)

int maxProduct(vector<int>& nums) {
        if(nums.size()==0){
            return 0;
        }
        int maxi=nums[0];
        
        for(int i=0;i<nums.size();i++){
            int currmax=nums[i];
            for(int j=i;j<nums.size();j++){
               if(i==j){
                   currmax=nums[j];
                   maxi= max(maxi,currmax) ;
               }else{                
                currmax*=nums[j];
                maxi= max(maxi,currmax) ;
                    }
            }
            
          
        }
        
       return maxi;
    }
//////////////////////////////////////////////////////////////////////////////////
O(N) solution

int maxProduct(vector<int>& arr) {
        int max_so_far=arr[0], 
            min_so_far=arr[0], 
            ans=arr[0], 
            n=arr.size();
	    
	    for(int i=1; i<n; i++) {            
            int temp= max_so_far;
	        max_so_far= max({arr[i], max_so_far*arr[i], min_so_far*arr[i]});
	        
	        min_so_far= min({arr[i], temp*arr[i], min_so_far*arr[i]});
            
            if(ans<max_so_far)
                ans= max_so_far;
	    }
        
	    return ans;
    }


///////////////////////////////////////////////////////////////////////////////

Keden's Algorithm

int maxProduct(vector<int>& nums) {
         int maxVal = nums[0];
        int minVal = nums[0];
        
        int maxProduct = nums[0];
        for(int i=1;i<nums.size();++i){
            
            if(nums[i] < 0)
                swap(maxVal,minVal);
            
            maxVal = max(nums[i],nums[i] * maxVal);
            minVal = min(nums[i],nums[i] * minVal);
            
            maxProduct = max(maxProduct,maxVal);
        }
        
        return maxProduct;
    }
